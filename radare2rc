
# analyze code and refs while disassembling
e asm.anal=true

# describes the assembler code
# -> pretty nice but lots of redundant stuff
e asm.describe=false

# set UTF8, arrows and everything looks a bit smoother
e scr.utf8=true
e scr.utf8.curvy=true

# Solarized theme
eco darkda

# instead of clear assembler code it leads to a pseudo C-code
#e asm.pseudo=false
# shows live register values next to instruction as comment
#e asm.emu=false
# shows live strings in local variables
#e asm.emu.str=true

# blankline after every basicblock
#e asm.bbline=true
e asm.cmt.refs=true
e asm.lines.width=4

# show section next to address
e asm.section=false

# dbg.bpinmaps = true -> breakpoints only allowed in mapped/valid regions
# sometimes you dont want that limitation
e dbg.bpinmaps = false

# break attached process with CTRL+C (default false)
e dbg.consbreak = true

# assume a new function is found after the last one
e anal.hasnext = false

# disable realign of disassembly if there is a flag in the middle
# if an instruction
#e asm.midflags = false

# demangle C++ functions
e asm.demangle=true


# macro creation command

# binary information like from pwntools
# (i ~format,arch,relro,canary,nx,pic,stripped,endian)

# if you have set a breakpoint with condition and command,
# multiple steps may be useful
(simple_loop_sample, f cnt=3, loop:, ?e hello `?vi cnt`, f cnt=`?vi cnt-1`, ?= cnt, ?!(), .loop:)
(dcLoop count, f cnt=$0, loop:, dc, f cnt=`?vi cnt-1`, ?= cnt, ?!(), .loop:)

# format the stack in the visual mode, for debugging sessions
(csv, e cmd.stack = pxr 40@r:SP, e dbg.slow=false) # x86
(csv64, e cmd.stack = pxr 80@r:SP) # do not activate slow debug -> too much spam
(stack, e cmd.stack = pxr 80@r:SP) # a simple command

# print part of the stack before ebp well formated
(ps, pxr 0x120 @ ebp-0x40)
(ps64, pxr 0x240 @ rbp-0x40)

# makros for r4ge
(mms address bytes name, #!pipe python /home/niku/SharedWin/GitRepos/r4ge/src/createVariable.py symb $0 $1 $2)
(markMemSymbolic address bytes name, #!pipe python /home/niku/SharedWin/GitRepos/r4ge/src/createVariable.py symb $0 $1 $2)
(addHook address instructions bytes comment, #!pipe python /home/niku/SharedWin/GitRepos/r4ge/src/createVariable.py hook $0 $1 $2 $3)  
(addAssert address assertion comment, #!pipe python /home/niku/git-repos/r4ge/src/createVariable.py assert $0 $1 $2)
(checkStdout content, #!pipe python /home/niku/git-repos/r4ge/src/createVariable.py checkstdout $0)
(createScript name, #!pipe python /home/niku/git-repos/r4ge/src/createScript.py $0)
#(callAddress, #!pipe python /home/niku/git-repos/r4ge/src/callState.py)
(callFunction retval, #!pipe python /home/niku/git-repos/r4ge/src/callFunction.py $0)
(r4ge, #!pipe python /home/niku/SharedWin/GitRepos/r4ge/src/r4ge.py)

# set r4ge in debug mode
$r4ge.verbose=True

# to call custom exploit files, from the current directory
(exp,  #!pipe python2.7 r2_script.py)
(exp2,  #!pipe python2.7 r2_script2.py)
(args,   #!pipe python2.7 /home/niku/git-repos/r2args/find_args.py)

# r2-tracer
(tracer, #!pipe python2.7 /home/niku/git-repos/r2_tracer/r2_tracer.py)
(t2, #!pipe python /home/niku/git-repos/r2scripts/r2trace2.0/r2trace.py)

#/home/niku/git-repos/BacArbeit/r4ge/src
# test macros
#(py, #!pipe python2.7 /home/niku/git-repos/CTF_ToolBox/radare2/panles.py)
#$pimp=#!pipe python /home/niku/.config/radare2/plugins/pimp/pimp_wrapper.py

